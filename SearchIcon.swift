//
//  SearchIcon.swift
//  (null)
//
//  Created on 11/11/19.
//  Copyright Â© 2019 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SearchIcon : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfSearch: UIImage?
        static var searchTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 35, y: 33.03))
        bezierPath.addLine(to: CGPoint(x: 27.54, y: 25.57))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 20.25), controlPoint1: CGPoint(x: 28.76, y: 24.13), controlPoint2: CGPoint(x: 29.5, y: 22.28))
        bezierPath.addCurve(to: CGPoint(x: 21.25, y: 12), controlPoint1: CGPoint(x: 29.5, y: 15.7), controlPoint2: CGPoint(x: 25.8, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 20.25), controlPoint1: CGPoint(x: 16.7, y: 12), controlPoint2: CGPoint(x: 13, y: 15.7))
        bezierPath.addCurve(to: CGPoint(x: 21.25, y: 28.5), controlPoint1: CGPoint(x: 13, y: 24.8), controlPoint2: CGPoint(x: 16.7, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 26.57, y: 26.54), controlPoint1: CGPoint(x: 23.28, y: 28.5), controlPoint2: CGPoint(x: 25.13, y: 27.76))
        bezierPath.addLine(to: CGPoint(x: 34.03, y: 34))
        bezierPath.addLine(to: CGPoint(x: 35, y: 33.03))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21.25, y: 27.13))
        bezierPath.addCurve(to: CGPoint(x: 14.38, y: 20.25), controlPoint1: CGPoint(x: 17.46, y: 27.13), controlPoint2: CGPoint(x: 14.38, y: 24.04))
        bezierPath.addCurve(to: CGPoint(x: 21.25, y: 13.38), controlPoint1: CGPoint(x: 14.38, y: 16.46), controlPoint2: CGPoint(x: 17.46, y: 13.38))
        bezierPath.addCurve(to: CGPoint(x: 28.13, y: 20.25), controlPoint1: CGPoint(x: 25.04, y: 13.38), controlPoint2: CGPoint(x: 28.13, y: 16.46))
        bezierPath.addCurve(to: CGPoint(x: 21.25, y: 27.13), controlPoint1: CGPoint(x: 28.13, y: 24.04), controlPoint2: CGPoint(x: 25.04, y: 27.13))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfSearch: UIImage {
        if Cache.imageOfSearch != nil {
            return Cache.imageOfSearch!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            SearchIcon.drawSearch()

        Cache.imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSearch!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var searchTargets: [AnyObject]! {
        get { return Cache.searchTargets }
        set {
            Cache.searchTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SearchIcon.imageOfSearch)
            }
        }
    }




    @objc(SearchIconResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
